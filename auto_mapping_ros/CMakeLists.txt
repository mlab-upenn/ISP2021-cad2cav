cmake_minimum_required(VERSION 3.1.0)
project(auto_mapping_ros)

## Compile as C++11, supported in ROS Kinetic and newer
add_compile_options(-std=c++17)
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -Wall")
set(CMAKE_CXX_FLAGS_DEBUG "-g -Wall")
#set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall")

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  roslib
  rospy
  std_msgs
  message_generation
  fmt_star
  geometry_msgs
  sensor_msgs
  genmsg
  tf2_ros
  actionlib
  actionlib_msgs
  graph_partitioner
)

set(CMAKE_PREFIX_PATH /usr/local/lib/cmake)
find_package(
  OsqpEigen
)
find_package(
  osqp
)

find_package(OpenCV REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(Threads REQUIRED)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
#add_service_files(
#  FILES
#  plan_srv.srv
#)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
#  generate_messages(
#    DEPENDENCIES
#    std_msgs
#  )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  LIBRARIES aco_router
  CATKIN_DEPENDS roscpp rospy roslib std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  aco_router
  include
  ${catkin_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIRS}
  /usr/local/include/eigen3/Eigen 
  /usr/local/include/osqp
)

include_directories(${EIGEN3_INCLUDE_DIR})
include_directories(${OpenCV_INCLUDE_DIRS})

add_subdirectory(aco_router)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/auto_mapping_ros.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(${PROJECT_NAME}_node node/auto_mapping_ros_node.cpp
src/constraints.cpp
src/cost.cpp
src/input.cpp
src/model.cpp
src/mpc.cpp
src/occgrid.cpp
src/state.cpp
src/trajectory_planner.cpp
src/transforms.cpp
src/visualizer.cpp
src/trajectory.cpp
src/local_planner.cpp
src/impl/types_impl.cpp
src/impl/graph_builder_impl.cpp
src/impl/landmarks_impl.cpp
src/impl/utils_impl.cpp
src/impl/maneuvers_impl.cpp
src/global_planner.cpp)

add_executable(skeletonizer_test testing/skeletonizer_test.cpp 
        src/impl/utils_impl.cpp 
        src/impl/types_impl.cpp
        src/impl/skeletonizer_impl.cpp
)

add_executable(graph_builder_test testing/graph_builder_test.cpp 
        src/impl/graph_builder_impl.cpp
        src/impl/landmarks_impl.cpp
        src/impl/utils_impl.cpp
        src/impl/types_impl.cpp
        src/impl/skeletonizer_impl.cpp
)

add_executable(frontier_finding_test 
        testing/frontier_finding_test.cpp 
        src/impl/graph_builder_impl.cpp
        src/impl/landmarks_impl.cpp
        src/impl/utils_impl.cpp
        src/impl/types_impl.cpp
        src/impl/skeletonizer_impl.cpp
)

add_executable(graph_builder_blueprint_test 
        testing/graph_builder_blueprint_test.cpp 
        src/impl/graph_builder_impl.cpp
        src/impl/landmarks_impl.cpp
        src/impl/utils_impl.cpp
        src/impl/types_impl.cpp
        src/impl/skeletonizer_impl.cpp
)

add_executable(coverage_planner_aco_test
        testing/coverage_planner_aco_test.cpp 
        src/impl/types_impl.cpp
        src/impl/utils_impl.cpp
        src/impl/graph_builder_impl.cpp
        src/impl/landmarks_impl.cpp
        src/impl/skeletonizer_impl.cpp
)

add_executable(coverage_sequence_creator 
        node/coverage_sequence_csv_creator.cpp
        src/impl/types_impl.cpp
        src/impl/utils_impl.cpp
        src/impl/graph_builder_impl.cpp
        src/impl/landmarks_impl.cpp
        src/impl/skeletonizer_impl.cpp
)

add_executable(coverage_sequence_creator_cad
        node/coverage_sequence_cad.cpp
        src/impl/types_impl.cpp
        src/impl/utils_impl.cpp
        src/impl/graph_builder_impl.cpp
        src/impl/graph_builder_bp_impl.cpp
)

add_executable(graph_partitioner_test
        node/coverage_sequence_graph_partitioner.cpp
        src/impl/types_impl.cpp
        src/impl/utils_impl.cpp
        src/impl/graph_builder_impl.cpp
        src/impl/graph_builder_bp_impl.cpp
        src/impl/skeletonizer_impl.cpp
)

#add_executable(global_planner_test testing/global_planner_test.cpp src/global_planner.cpp)


## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(global_planner_test ${fmt_star_EXXPORTED_TARGETS} fmt_star_generate_messages_cpp)
add_dependencies(${PROJECT_NAME}_node ${fmt_star_EXXPORTED_TARGETS} fmt_star_generate_messages_cpp)

## Specify libraries to link a library or executable target against

target_link_libraries(${PROJECT_NAME}_node
    ${catkin_LIBRARIES}
    ${OpenCV_LIBS}
    OsqpEigen::OsqpEigen
    osqp::osqp
    acolib
    config++
    stdc++fs
    )

target_link_libraries(graph_builder_test
        ${catkin_LIBRARIES}
        ${OpenCV_LIBS}
        -lconfig++
        acolib
        )

target_link_libraries(frontier_finding_test
        ${catkin_LIBRARIES}
        ${OpenCV_LIBS}
        -lconfig++
        acolib
        )

target_link_libraries(skeletonizer_test
        ${catkin_LIBRARIES}
        ${OpenCV_LIBS}
        acolib
        -lconfig++
        )

target_link_libraries(graph_builder_blueprint_test
        ${catkin_LIBRARIES}
        ${OpenCV_LIBS}
        -lconfig++
        acolib
        )

target_link_libraries(coverage_planner_aco_test
        ${catkin_LIBRARIES}
        ${OpenCV_LIBS}
        -lconfig++
        acolib
        )

target_link_libraries(coverage_sequence_creator
        ${catkin_LIBRARIES}
        ${OpenCV_LIBS}
        -lconfig++
        acolib
        )

target_link_libraries(coverage_sequence_creator_cad
        ${catkin_LIBRARIES}
        ${OpenCV_LIBS}
        Threads::Threads
        -lconfig++
        acolib
)

target_link_libraries(graph_partitioner_test
        ${catkin_LIBRARIES}
        ${OpenCV_LIBS}
        Threads::Threads
        -lconfig++
        acolib
)

#target_link_libraries(global_planner_test
#        ${catkin_LIBRARIES}
#        ${OpenCV_LIBS}
#        -lconfig++
#        )



#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_auto_mapping_ros.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
