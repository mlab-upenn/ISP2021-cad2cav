// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/cp_model_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ortools/sat/cp_model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto_metadata_getter(int index);
namespace operations_research {
namespace sat {
namespace v1 {
class CpSolverRequest;
struct CpSolverRequestDefaultTypeInternal;
extern CpSolverRequestDefaultTypeInternal _CpSolverRequest_default_instance_;
}  // namespace v1
}  // namespace sat
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::sat::v1::CpSolverRequest* Arena::CreateMaybeMessage<::operations_research::sat::v1::CpSolverRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {
namespace sat {
namespace v1 {

// ===================================================================

class CpSolverRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.v1.CpSolverRequest) */ {
 public:
  inline CpSolverRequest() : CpSolverRequest(nullptr) {}
  virtual ~CpSolverRequest();
  explicit constexpr CpSolverRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpSolverRequest(const CpSolverRequest& from);
  CpSolverRequest(CpSolverRequest&& from) noexcept
    : CpSolverRequest() {
    *this = ::std::move(from);
  }

  inline CpSolverRequest& operator=(const CpSolverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpSolverRequest& operator=(CpSolverRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpSolverRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpSolverRequest* internal_default_instance() {
    return reinterpret_cast<const CpSolverRequest*>(
               &_CpSolverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpSolverRequest& a, CpSolverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CpSolverRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpSolverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpSolverRequest* New() const final {
    return CreateMaybeMessage<CpSolverRequest>(nullptr);
  }

  CpSolverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpSolverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpSolverRequest& from);
  void MergeFrom(const CpSolverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpSolverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.sat.v1.CpSolverRequest";
  }
  protected:
  explicit CpSolverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersAsStringFieldNumber = 2,
    kModelFieldNumber = 1,
  };
  // string parameters_as_string = 2;
  void clear_parameters_as_string();
  const std::string& parameters_as_string() const;
  void set_parameters_as_string(const std::string& value);
  void set_parameters_as_string(std::string&& value);
  void set_parameters_as_string(const char* value);
  void set_parameters_as_string(const char* value, size_t size);
  std::string* mutable_parameters_as_string();
  std::string* release_parameters_as_string();
  void set_allocated_parameters_as_string(std::string* parameters_as_string);
  private:
  const std::string& _internal_parameters_as_string() const;
  void _internal_set_parameters_as_string(const std::string& value);
  std::string* _internal_mutable_parameters_as_string();
  public:

  // .operations_research.sat.CpModelProto model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::operations_research::sat::CpModelProto& model() const;
  ::operations_research::sat::CpModelProto* release_model();
  ::operations_research::sat::CpModelProto* mutable_model();
  void set_allocated_model(::operations_research::sat::CpModelProto* model);
  private:
  const ::operations_research::sat::CpModelProto& _internal_model() const;
  ::operations_research::sat::CpModelProto* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::operations_research::sat::CpModelProto* model);
  ::operations_research::sat::CpModelProto* unsafe_arena_release_model();

  // @@protoc_insertion_point(class_scope:operations_research.sat.v1.CpSolverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameters_as_string_;
  ::operations_research::sat::CpModelProto* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpSolverRequest

// .operations_research.sat.CpModelProto model = 1;
inline bool CpSolverRequest::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool CpSolverRequest::has_model() const {
  return _internal_has_model();
}
inline const ::operations_research::sat::CpModelProto& CpSolverRequest::_internal_model() const {
  const ::operations_research::sat::CpModelProto* p = model_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::CpModelProto&>(
      ::operations_research::sat::_CpModelProto_default_instance_);
}
inline const ::operations_research::sat::CpModelProto& CpSolverRequest::model() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.v1.CpSolverRequest.model)
  return _internal_model();
}
inline void CpSolverRequest::unsafe_arena_set_allocated_model(
    ::operations_research::sat::CpModelProto* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.v1.CpSolverRequest.model)
}
inline ::operations_research::sat::CpModelProto* CpSolverRequest::release_model() {
  
  ::operations_research::sat::CpModelProto* temp = model_;
  model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::operations_research::sat::CpModelProto* CpSolverRequest::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:operations_research.sat.v1.CpSolverRequest.model)
  
  ::operations_research::sat::CpModelProto* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::operations_research::sat::CpModelProto* CpSolverRequest::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::CpModelProto>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::operations_research::sat::CpModelProto* CpSolverRequest::mutable_model() {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.v1.CpSolverRequest.model)
  return _internal_mutable_model();
}
inline void CpSolverRequest::set_allocated_model(::operations_research::sat::CpModelProto* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model)->GetArena();
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.v1.CpSolverRequest.model)
}

// string parameters_as_string = 2;
inline void CpSolverRequest::clear_parameters_as_string() {
  parameters_as_string_.ClearToEmpty();
}
inline const std::string& CpSolverRequest::parameters_as_string() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.v1.CpSolverRequest.parameters_as_string)
  return _internal_parameters_as_string();
}
inline void CpSolverRequest::set_parameters_as_string(const std::string& value) {
  _internal_set_parameters_as_string(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.v1.CpSolverRequest.parameters_as_string)
}
inline std::string* CpSolverRequest::mutable_parameters_as_string() {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.v1.CpSolverRequest.parameters_as_string)
  return _internal_mutable_parameters_as_string();
}
inline const std::string& CpSolverRequest::_internal_parameters_as_string() const {
  return parameters_as_string_.Get();
}
inline void CpSolverRequest::_internal_set_parameters_as_string(const std::string& value) {
  
  parameters_as_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CpSolverRequest::set_parameters_as_string(std::string&& value) {
  
  parameters_as_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:operations_research.sat.v1.CpSolverRequest.parameters_as_string)
}
inline void CpSolverRequest::set_parameters_as_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameters_as_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:operations_research.sat.v1.CpSolverRequest.parameters_as_string)
}
inline void CpSolverRequest::set_parameters_as_string(const char* value,
    size_t size) {
  
  parameters_as_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:operations_research.sat.v1.CpSolverRequest.parameters_as_string)
}
inline std::string* CpSolverRequest::_internal_mutable_parameters_as_string() {
  
  return parameters_as_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CpSolverRequest::release_parameters_as_string() {
  // @@protoc_insertion_point(field_release:operations_research.sat.v1.CpSolverRequest.parameters_as_string)
  return parameters_as_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CpSolverRequest::set_allocated_parameters_as_string(std::string* parameters_as_string) {
  if (parameters_as_string != nullptr) {
    
  } else {
    
  }
  parameters_as_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameters_as_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.v1.CpSolverRequest.parameters_as_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace sat
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fcp_5fmodel_5fservice_2eproto
